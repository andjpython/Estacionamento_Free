"""
Interface de terminal para o Sistema de Estacionamento Rotativo
"""
from sqlalchemy.orm import Session
from utils.db_context import get_db_session
from utils.validators import validar_placa, validar_matricula, validar_cpf
from estacionamento import (
    estacionar_veiculo, liberar_vaga, remover_veiculo_por_cpf,
    registrar_entrada, registrar_saida
)
from services.veiculo_service import cadastrar_veiculo, listar_veiculos_cadastrados
from services.funcionario_service import cadastrar_funcionario, listar_funcionarios  
from services.vaga_service import ver_status_vagas, verificar_tempo_excedido
from utils.logging_config import setup_logger

# Configurar logger
logger = setup_logger(__name__)

def menu_principal():
    """Menu principal do sistema (interface de terminal)"""
    while True:
        print("\n==== SISTEMA DE ESTACIONAMENTO ROTATIVO ====")
        print("0. √Årea do Supervisor üîê")
        print("1. Cadastrar ve√≠culo")
        print("2. Estacionar ve√≠culo")
        print("3. Registrar sa√≠da")
        print("4. Ver status de vagas")
        print("5. Verificar tempo excedido")
        print("6. Remover ve√≠culo por CPF")
        print("7. Cadastrar funcion√°rio")
        print("8. Listar funcion√°rios")
        print("9. Login funcion√°rio")
        print("10. Logout funcion√°rio")
        print("11. Listar ve√≠culos cadastrados")
        print("12. Sair")
        
        opcao = input("Escolha uma op√ß√£o: ").strip()
        
        if opcao == "12":
            print("üö™ Saindo... At√© logo!")
            break
            
        try:
            with get_db_session() as db:
                if opcao == "0":
                    menu_supervisor_interface(db)
                elif opcao == "1":
                    cadastrar_veiculo_interface(db)
                elif opcao == "2":
                    estacionar_veiculo_interface(db)
                elif opcao == "3":
                    liberar_vaga_interface(db)
                elif opcao == "4":
                    print(ver_status_vagas(db))
                elif opcao == "5":
                    excedidos = verificar_tempo_excedido(db)
                    if excedidos:
                        print("‚ö†Ô∏è VE√çCULOS COM TEMPO EXCEDIDO:")
                        for item in excedidos:
                            print(f"Vaga {item['numero']} - {item['veiculo']} - {item['horas']}h")
                    else:
                        print("‚úÖ Nenhum ve√≠culo com tempo excedido.")
                elif opcao == "6":
                    remover_veiculo_interface(db)
                elif opcao == "7":
                    cadastrar_funcionario_interface(db)
                elif opcao == "8":
                    print(listar_funcionarios(db))
                elif opcao == "9":
                    login_funcionario_interface(db)
                elif opcao == "10":
                    logout_funcionario_interface(db)
                elif opcao == "11":
                    print(listar_veiculos_cadastrados(db))
                else:
                    print("‚ùå Op√ß√£o inv√°lida!")
                    
        except Exception as e:
            logger.error(f"Erro no menu principal: {e}")
            print("‚ùå Erro interno do sistema!")

def cadastrar_veiculo_interface(db: Session):
    """Interface para cadastro de ve√≠culo"""
    print("\n=== CADASTRAR VE√çCULO ===")
    
    # Validar placa
    while True:
        placa = input("Placa: ").strip().upper()
        valido, msg = validar_placa(placa)
        if valido:
            break
        print(msg)
    
    # Validar CPF
    while True:
        cpf = input("CPF: ").strip()
        valido, msg = validar_cpf(cpf)
        if valido:
            break
        print(msg)
    
    modelo = input("Modelo (deixe vazio se visitante): ").strip()
    nome = input("Nome: ").strip()
    if not nome:
        print("‚ùå Nome √© obrigat√≥rio!")
        return
        
    bloco = input("Bloco: ").strip()
    apartamento = input("Apartamento: ").strip()
    
    resultado = cadastrar_veiculo(db, placa, cpf, modelo, nome, bloco, apartamento)
    print(resultado)

def estacionar_veiculo_interface(db: Session):
    """Interface para estacionar ve√≠culo"""
    print("\n=== ESTACIONAR VE√çCULO ===")
    
    # Validar placa
    while True:
        placa = input("Digite a placa do ve√≠culo: ").strip().upper()
        valido, msg = validar_placa(placa)
        if valido:
            break
        print(msg)
    
    resultado = estacionar_veiculo(db, placa)
    print(resultado)

def liberar_vaga_interface(db: Session):
    """Interface para liberar vaga"""
    print("\n=== REGISTRAR SA√çDA ===")
    
    # Validar placa
    while True:
        placa = input("Placa do ve√≠culo: ").strip().upper()
        valido, msg = validar_placa(placa)
        if valido:
            break
        print(msg)
    
    # Validar matr√≠cula
    while True:
        matricula = input("Matr√≠cula do funcion√°rio: ").strip()
        valido, msg = validar_matricula(matricula)
        if valido:
            break
        print(msg)
    
    resultado = liberar_vaga(db, placa, matricula)
    print(resultado)

def remover_veiculo_interface(db: Session):
    """Interface para remo√ß√£o de ve√≠culo por CPF"""
    print("\n=== REMOVER VE√çCULO POR CPF ===")
    
    # Validar CPF
    while True:
        cpf = input("CPF do propriet√°rio: ").strip()
        valido, msg = validar_cpf(cpf)
        if valido:
            break
        print(msg)
    
    # Validar matr√≠cula
    while True:
        matricula = input("Matr√≠cula do funcion√°rio: ").strip()
        valido, msg = validar_matricula(matricula)
        if valido:
            break
        print(msg)
    
    resultado = remover_veiculo_por_cpf(db, cpf, matricula)
    print(resultado)

def cadastrar_funcionario_interface(db: Session):
    """Interface para cadastro de funcion√°rio"""
    print("\n=== CADASTRAR FUNCION√ÅRIO ===")
    
    nome = input("Nome do funcion√°rio: ").strip()
    if not nome:
        print("‚ùå Nome √© obrigat√≥rio!")
        return
    
    # Validar matr√≠cula
    while True:
        matricula = input("Matr√≠cula (4 d√≠gitos): ").strip()
        valido, msg = validar_matricula(matricula)
        if valido:
            break
        print(msg)
    
    resultado = cadastrar_funcionario(db, nome, matricula)
    print(resultado)

def login_funcionario_interface(db: Session):
    """Interface para login de funcion√°rio"""
    print("\n=== LOGIN FUNCION√ÅRIO ===")
    
    # Validar matr√≠cula
    while True:
        matricula = input("Digite sua matr√≠cula: ").strip()
        valido, msg = validar_matricula(matricula)
        if valido:
            break
        print(msg)
    
    resultado = registrar_entrada(db, matricula)
    print(resultado)

def logout_funcionario_interface(db: Session):
    """Interface para logout de funcion√°rio"""
    print("\n=== LOGOUT FUNCION√ÅRIO ===")
    
    # Validar matr√≠cula
    while True:
        matricula = input("Digite sua matr√≠cula: ").strip()
        valido, msg = validar_matricula(matricula)
        if valido:
            break
        print(msg)
    
    resultado = registrar_saida(db, matricula)
    print(resultado)

def menu_supervisor_interface(db: Session):
    """Interface para √°rea do supervisor"""
    print("\n=== ACESSO RESTRITO - SUPERVISOR ===")
    from supervisor import menu_supervisor
    menu_supervisor(db)

if __name__ == "__main__":
    menu_principal()